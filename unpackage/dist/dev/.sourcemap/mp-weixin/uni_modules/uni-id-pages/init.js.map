{"version":3,"file":"init.js","sources":["uni_modules/uni-id-pages/init.js"],"sourcesContent":["// 导入配置\r\nimport config from '@/uni_modules/uni-id-pages/config.js'\r\n// uni-id的云对象\r\nconst uniIdCo = uniCloud.importObject('uni-id-co', {\r\n  customUI: true\r\n})\r\n// 用户配置的登录方式、是否打开调试模式\r\nconst {\r\n  loginTypes,\r\n  debug\r\n} = config\r\n\r\nexport default async function () {\r\n  // 有打开调试模式的情况下\r\n  if (debug) {\r\n    // 1. 检查本地uni-id-pages中配置的登录方式，服务器端是否已经配置正确。否则提醒并引导去配置\r\n    // 调用云对象，获取服务端已正确配置的登录方式\r\n    const {\r\n      supportedLoginType\r\n    } = await uniIdCo.getSupportedLoginType()\r\n    console.log('supportedLoginType: ' + JSON.stringify(supportedLoginType))\r\n    // 登录方式，服务端和客户端的映射关系\r\n    const data = {\r\n      smsCode: 'mobile-code',\r\n      univerify: 'univerify',\r\n      username: 'username-password',\r\n      weixin: 'weixin',\r\n      qq: 'qq',\r\n      xiaomi: 'xiaomi',\r\n      sinaweibo: 'sinaweibo',\r\n      taobao: 'taobao',\r\n      facebook: 'facebook',\r\n      google: 'google',\r\n      alipay: 'alipay',\r\n      apple: 'apple',\r\n      weixinMobile: 'weixin'\r\n    }\r\n    // 遍历客户端配置的登录方式，与服务端比对。并在错误时抛出错误提示\r\n    const list = loginTypes.filter(type => !supportedLoginType.includes(data[type]))\r\n    if (list.length) {\r\n      console.error(\r\n\t\t\t\t`错误：前端启用的登录方式:${list.join('，')};没有在服务端完成配置。配置文件路径：\"/uni_modules/uni-config-center/uniCloud/cloudfunctions/common/uni-config-center/uni-id/config.json\"`\r\n      )\r\n    }\r\n  }\r\n\r\n  // #ifdef APP-PLUS\r\n  // 如果uni-id-pages配置的登录功能有一键登录，有则执行预登录（异步）\r\n  if (loginTypes.includes('univerify')) {\r\n    uni.preLogin({\r\n      provider: 'univerify',\r\n      complete: e => {\r\n        // console.log(e);\r\n      }\r\n    })\r\n  }\r\n  // #endif\r\n\r\n  // 3. 绑定clientDB错误事件\r\n  // clientDB对象\r\n  const db = uniCloud.database()\r\n  db.on('error', onDBError)\r\n  // clientDB的错误提示\r\n  function onDBError ({\r\n    code, // 错误码详见https://uniapp.dcloud.net.cn/uniCloud/clientdb?id=returnvalue\r\n    message\r\n  }) {\r\n    // console.error('onDBError', {code,message});\r\n  }\r\n  // 解绑clientDB错误事件\r\n  // db.off('error', onDBError)\r\n\r\n  // 4. 同步客户端push_clientid至device表\r\n  if (uniCloud.onRefreshToken) {\r\n    uniCloud.onRefreshToken(() => {\r\n      // console.log('onRefreshToken');\r\n      if (uni.getPushClientId) {\r\n        uni.getPushClientId({\r\n          success: async function (e) {\r\n            // console.log(e)\r\n            const pushClientId = e.cid\r\n            // console.log(pushClientId);\r\n            const res = await uniIdCo.setPushCid({\r\n              pushClientId\r\n            })\r\n            // console.log('getPushClientId', res);\r\n          },\r\n          fail (e) {\r\n            // console.log(e)\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n"],"names":["uniCloud","config","uni"],"mappings":";;;AAGA,MAAM,UAAUA,cAAAA,GAAS,aAAa,aAAa;AAAA,EACjD,UAAU;AACZ,CAAC;AAED,MAAM;AAAA,EACJ;AAAA,EACA;AACF,IAAIC,8BAAM;AAEK,eAAA,gBAAkB;AAE/B,MAAI,OAAO;AAGT,UAAM;AAAA,MACJ;AAAA,IACN,IAAQ,MAAM,QAAQ,sBAAuB;AACzCC,wBAAA,MAAA,OAAA,0CAAY,yBAAyB,KAAK,UAAU,kBAAkB,CAAC;AAEvE,UAAM,OAAO;AAAA,MACX,SAAS;AAAA,MACT,WAAW;AAAA,MACX,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,cAAc;AAAA,IACf;AAED,UAAM,OAAO,WAAW,OAAO,UAAQ,CAAC,mBAAmB,SAAS,KAAK,IAAI,CAAC,CAAC;AAC/E,QAAI,KAAK,QAAQ;AACfA;;;QACF,gBAAgB,KAAK,KAAK,GAAG,CAAC;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AAgBD,QAAM,KAAKF,cAAQ,GAAC,SAAU;AAC9B,KAAG,GAAG,SAAS,SAAS;AAExB,WAAS,UAAW;AAAA,IAClB;AAAA;AAAA,IACA;AAAA,EACJ,GAAK;AAAA,EAEF;AAKD,MAAIA,cAAAA,GAAS,gBAAgB;AAC3BA,kBAAQ,GAAC,eAAe,MAAM;AAE5B,UAAIE,cAAAA,MAAI,iBAAiB;AACvBA,sBAAAA,MAAI,gBAAgB;AAAA,UAClB,SAAS,eAAgB,GAAG;AAE1B,kBAAM,eAAe,EAAE;AAEX,kBAAM,QAAQ,WAAW;AAAA,cACnC;AAAA,YACd,CAAa;AAAA,UAEF;AAAA,UACD,KAAM,GAAG;AAAA,UAER;AAAA,QACX,CAAS;AAAA,MACF;AAAA,IACP,CAAK;AAAA,EACF;AACH;;"}